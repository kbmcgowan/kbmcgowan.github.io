{
  "hash": "12016597b93f8fee6a83102d4486a93e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle:  \"Forced-alignment and segmentation of airflow data\"\ndate:   2009-03-23 15:11:16\ncategories: praat airflow htk\nimage: images/praat.png\n---\n\n\n\n\nAn airflow system like <a href=\"http://www.sqlab.fr/evaRootUK.htm\">the SQLab EVA2</a> used in our lab creates separate wav-like files for audio, oral airflow, and nasal airflow.  Usually we use a program like <a href=\"http://www.speech.kth.se/wavesurfer/\">wavesurfer</a> or <a href=\"http://www.fon.hum.uva.nl/praat/\">Praat</a> to view these files and extract our measurements.\n\nBut what if you want to extract measurements for all of the segments in a reasonably-sized corpus of continuous speech?  This can, of course, be done by hand but the process is tedious, labor-intensive, and inescapably subjective.\n This tutorial explains how to use Praat and HTK to segment audio recordings and use that segmentation to extract phone-level airflow data for an entire corpus.  The segmentation is unlikely to be as good as a trained linguist might achieve, but it's definitely faster and a very good starting point.  The corpus I'm working with is a set of recordings of the <a href=\"http://www.ldc.upenn.edu/Catalog/CatalogEntry.jsp?catalogId=LDC93S1\">TIMIT</a> prompts I made for my doctoral candidacy qualifying project:  Modeling Airflow for Concatenative Speech Synthesis.\n\n**Solution**\n\n1. Convert the EVA2 files to WAV format.\n\nSQLab distribute a piece of Windows-only, closed-source software called <a href=\"http://www.lpl.univ-aix.fr/~lpldev/lpltools/\">RIFF Edit</a> for converting from their proprietary format to WAV format.  Works great on my Mac using <a href=\"http://www.codeweavers.com/products/\">CrossOver</a> which, I believe, is just a very nice version of <a href=\"http://www.winehq.org/\">wine</a>.\n\n\n2. Break the audio recordings up into separate files (one prompt/sentence per file)\nOf course there are many ways to do this.  Usually one would record each prompt separately so that the audio files are naturally in separate files.  The clumsy EVA2 system makes this arrangement difficult, though, so I used a TextGrid to mark each prompt on an interval tier.  This can be done automatically using Praat's \"Annotate --> To TextGrid (Silences)\" command (some clean-up is usually necessary, but it saves a lot of work).  Once the prompts are marked in the TextGrid I <a href=\"/stuff/assets/extract.praat\">run this Praat script that I did not write</a>.\n\n( As a quick aside, <a href=\"http://www.ling.upenn.edu/~kgorman/\">Kyle Gorman</a> has written a terrific little Python class for manipulating TextGrids --does exactly what you'd want in just exactly the way you'd probably expect. )</a>\n\n\n3. Now use the same TextGrid and script to extract prompts from the OAF (oral airflow) and NAF (nasal airflow) files.\n\nThis is the great strength of using something like Praat in the first place.  Be sure to check a random sample of your alignments to make sure everything worked, but I've never had a problem.\n\n\n4. Label all three files properly\n\nMy utterances are in a file called utts.data (identical to the file needed by Festival for voice creation) with the format:\n\n    (audio_0003 \"This was easy for us.\")\n    (audio_0004 \"Jane may earn more money by working hard.\")\n    (audio_0005 \"She is thinner than I am.\")\n    (audio_0006 \"Bright sunshine shimmers on the ocean.\")\n    (audio_0007 \"Nothing is as offensive as innocence.\")\n    (audio_0008 \"Why yell or worry over silly items?\")\n    (audio_0009 \"Where were you while we were away?\")\n\n&nbsp;\n\nAnd then I run the shell script <a href=\"/blog/assets/mkpf.sh\">mkpf.sh</a> to double check the audio and create the prompt files.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n\n#!/bin/bash\n\nexport UTTS=../utts.data\n\necho which file are we starting with [ 1 = first ]?\nread START;\n\nif [ \"$START\" == \"\" ]; then\n     START=1\nfi\n\nfor i in `ls a*.wav | sort -n -k1.2`; do\n    num=`printf \"%04d\" $START`\n\n    line=`grep \"audio_$num\" $UTTS`\n    prompt=`echo $line | awk -F\\\" '{print $2}'`\n    echo $line\n    afplay $i;\n    echo make $i $num [y] ?;\n\n    read ANSWER;\n\n    if [ \"$ANSWER\" == \"n\" ]; then\n        echo doing nothing\n    else\n        if [ \"$ANSWER\" == \"p\" ]; then\n            let \"START = START - 1\"\n            num=`printf \"%04d\" $START`\n\n            echo overwriting $i to $num ...\n        else\n            echo saving $i to $num ...\n        fi\n\n        cp $i audio_${num}.wav\n        cp oaf_$i oaf_${num}.wav\n        cp naf_$i naf_${num}.wav\n        echo $prompt > ${num}.txt\n        rm $i\n\n        let \"START = START + 1\"\n    fi\ndone\n\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}